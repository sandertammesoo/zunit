######################################################################
# This file was autogenerated by 'configure'. Do not edit it directly!
# Invocation was: ./configure 
######################################################################
PREFIX=/usr/local
######################################################################
# vim: ft=make sw=4 ts=4 noet!

# Default installation directory (if not overridden)
PREFIX ?= /usr/local

# The default shell to use (if not overridden)
SHELL  ?= zsh

# Options for the cram testing framework
CRAM_OPTS ?= -v

# Define project structure (directories)
PROJECT ?= $(CURDIR)
BIN     ?= ${PROJECT}/bin
OUT     ?= ${PROJECT}/out
DOCS    ?= ${PROJECT}/docs
SRC     ?= ${PROJECT}/src
TESTS   ?= ${PROJECT}/tests

# Zsh-related settings
ZSH_VERSION     ?= zsh-5.8
CONTAINER_ROOT  ?= /zunit
USE_CONTAINER   ?= docker
CONTAINER_IMAGE ?= desyncr/zsh-docker-

# Define executable and source variables
PROG ?= ${OUT}/zunit
EXEC ?= ${BIN}/zunit
SRC  ?= ${SRC}
GLOB ?=

# Gather all source files except `zunit.zsh`
LIB      = $(filter-out ${SRC}/zunit.zsh,$(wildcard ${SRC}/*.zsh))
COMMANDS = $(sort $(wildcard ${SRC}/commands/*.zsh))
REPORTS  = $(sort $(wildcard ${SRC}/reports/*.zsh))

# Combine all files into a single list
GLOB    += ${LIB} ${REPORTS} ${COMMANDS} ${SRC}/zunit.zsh

# Define version information
VERSION_FILE = ${PROJECT}/VERSION
VERSION ?= $(shell cat ${VERSION_FILE} 2>/dev/null || echo "develop")

# Create an autogenerated file banner
BANNER_SEP  = $(shell printf '%*s' 70 | tr ' ' '\#')
BANNER_TEXT = This file was autogenerated by \`make\`. Do not edit it directly!
BANNER      = ${BANNER_SEP}\n\# ${BANNER_TEXT}\n${BANNER_SEP}\n

# Add a file header for generated scripts
HEADER_TEXT =\
\#!/usr/bin/env zsh\n\
\# Zunit: A unit test framework for zsh\n\
\# License: MIT License\n

# Helper function: Perform in-place sed replacement
define ised
	sed $(1) $(2) > "$(2).1"
	mv "$(2).1" "$(2)"
endef

# Helper function: Perform in-place sed replacement with extended regex
define isede
	sed -E $(1) $(2) > "$(2).1"
	mv "$(2).1" "$(2)"
endef

# Define main build targets (these are not actual files)
.PHONY: all build clean install itests tests uninstall

# Default target: Run 'build' when 'make' is executed
all: build

# Release process TODO: Determine how, when and why to use
release:
	git checkout develop
	git checkout -B release/${VERSION}
	${MAKE} build test
	git add ${VERSION_FILE}
	git commit -S -m "Update for ${VERSION}"
	git add ${EXEC}
	git commit -S -m "Build release ${VERSION}"

# Publish the release branch TODO: Determine how, when and why to use
publish:
	git push origin release/${VERSION}

# Deploy the release (creates a signed tag and archive) TODO: Determine how, when and why to use
deploy:
	# git checkout develop
	git tag -m "Build release ${VERSION}" -s "v${VERSION}"
	git archive --output=${VERSION}.tar.gz --prefix=zunit-$$(echo ${VERSION}|sed s/v//)/ ${VERSION}
	zcat ${VERSION}.tar.gz | gpg --armor --detach-sign >${VERSION}.tar.gz.sign
	zcat ${VERSION}.tar.gz | gpg --verify ${VERSION}.tar.gz.sign -
	# git push upstream ${VERSION}

# Run commands inside a container (if enabled) TODO: Determine how, when and why to use
.container:
ifeq (${USE_CONTAINER}, docker)
	@docker run --rm --privileged=true -it -v ${PROJECT}:/zunit ${CONTAINER_IMAGE}${ZSH_VERSION} $(shell echo "${COMMAND}" | sed "s|${PROJECT}|${CONTAINER_ROOT}|g")
else ifeq (${USE_CONTAINER}, no)
	${COMMAND}
endif

# Generate documentation TODO: Determine how, when and why to use
docs:
	mkdir ${DOCS}
	cd ${DOCS}
	zsh -dfilc "zsd -v --scomm --cignore '(\#*FUNCTION:[[:space:]][\:\âˆž\.\+\@\-a-zA-Z0-9]*[\[]*|}[[:space:]]\#[[:space:]][\]]*)' ${GLOB}"

# Gather project info TODO: Determine how, when and why to use
info:
	@${MAKE} .container COMMAND="sh -c 'cat ${PROJECT}/VERSION; zsh --version; git --version; env'"

# Run tests TODO: Determine how, when and why to use
tests:
	@${make} .container command="sh -c 'zdotdir=${tests} zunit=${project} cram ${cram_opts} --shell=zsh ${test}'"

# Run the main Zunit program
test:
	${EXEC} run

# Install Zunit locally
install:
	install -cv -m755 ${EXEC} ${PREFIX}/bin/zunit

# Uninstall Zunit
uninstall:
	rm -f ${PREFIX}/bin/zunit

# Clean up generated files
clean:
	rm -rf ${BIN} ${OUT} Makefile

# Install required dependencies (cram testing framework) TODO: Determine how, when and why to use
install-deps:
	sudo pip install cram=='0.6.*'

# Build the Zunit binary
build:
	@echo Building Zunit...

	# Ensure the bin directory exists
	@mkdir -p ${BIN}
	@mkdir -p ${OUT}
	
	# Add the header text to the binary
	@printf "${HEADER_TEXT}" > ${PROG}
	
	# Add the auto-generated warning banner
	@echo "${BANNER}" >> ${PROG}
	
	# Process each source file and append its contents to the program
	@for src in ${GLOB}; do \
		echo "----> Processing $$src"; \
		cat "$$src" | grep -v -e '#\svim.*' -e '^(\s*#.*|\s*)\$$' >> ${PROG}; \
	done

	# Replace placeholders with actual values
	@$(call ised,"s/{{ZUNIT_REVISION}}/$$(git log -n1 --format=%h -- src)/",${PROG})
	@$(call ised,"s/{{ZUNIT_REVISION_DATE}}/$$(git log -n1 --format='%ai' -- src)/",${PROG})
	@$(call ised,"s/{{ZUNIT_VERSION}}/$$(cat ${VERSION_FILE})/",${PROG})
	
	@install -cv -m755 ${PROG} ${EXEC}
	@rm -rf ${OUT}
